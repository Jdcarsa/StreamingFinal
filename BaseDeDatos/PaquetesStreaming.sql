----------------------------------------------------------------------------------
/*
    Creación de paquetes para el funcionamiento de la
    plataforma de streaming.
    
    Hecho por:
    Elkin Ariel Morillo Quenguan
    Jesús David Cardenas Sandoval
    Jesus Gabriel Parra Dugarte
*/
----------------------------------------------------------------------------------

SET SERVEROUTPUT ON;
SET VERIFY OFF;
SET ECHO OFF;

----------------------------------------------------------------------------------
/*
    PAQUETE PARA LA LÓGICA DE ADMINISTRADOR
*/
----------------------------------------------------------------------------------

--CREACIÓN DE SECUENCIA Y TRIGGER PARA AUTOMATIZAR EL CÓDIGO

CREATE SEQUENCE ADMINISTRADOR_CODIGO_SECUENCIA START WITH 000001;

CREATE OR REPLACE TRIGGER ADMINISTRADOR_CODIGO_TRIGGER
    BEFORE INSERT ON ADMINISTRADOR
        FOR EACH ROW
    BEGIN
        SELECT ADMINISTRADOR_CODIGO_SECUENCIA.NEXTVAL
        INTO :NEW.CODIGO
        FROM DUAL;
END;

--DECLARACIÓN DEL PAQUETE

CREATE OR REPLACE PACKAGE PAQUETE_ADMINISTRADOR IS
    
    --CRUDS DE ADMINISTRADOR
    
    PROCEDURE CREAR_ADMINISTRADOR(P_ID IN NUMBER, P_USUARIO_ADMIN IN VARCHAR2,
        P_NOMBRE1 IN VARCHAR2, P_NOMBRE2 IN VARCHAR2, P_APELLIDO1 IN VARCHAR2, P_APELLIDO2 IN VARCHAR2,
        P_FECHANACIMIENTO IN DATE, P_CONTRASENIA IN VARCHAR2, P_FECHACONTRATO IN DATE, P_TELEFONO IN VARCHAR2,
        P_CORREO IN VARCHAR2);
        
    PROCEDURE ACTUALIZAR_ADMINISTRADOR(P_CODIGO IN NUMBER, P_USUARIO_ADMIN IN VARCHAR2, P_NOMBRE1 IN VARCHAR2,
        P_NOMBRE2 IN VARCHAR2, P_APELLIDO1 IN VARCHAR2, P_APELLIDO2 IN VARCHAR2, P_CONTRASENIA IN VARCHAR2,
        P_TELEFONO IN VARCHAR2);
    
    --SE INCLUYE LA ACTUALIZACIÓN DEL SUPER USUARIO
    PROCEDURE ACTUALIZAR_SU(P_CONTRASENIA IN VARCHAR2 ,P_CONTRASENIA_NUEVA IN VARCHAR2);
    
    PROCEDURE DESHABILITAR_ADMINISTRADOR(P_CODIGO IN NUMBER);
    
    --PROYECCIÓN DE LOS REGISTROS
    
    PROCEDURE PROYECTAR_ADMINISTRADORES (REG_ADMINISTRADORES OUT SYS_REFCURSOR);
    
    --RETORNAR DE ADMINISTRADOR
    
    PROCEDURE EXISTE_ADMIN(P_USUARIO_ADMIN IN VARCHAR2 , V_EXISTE OUT NUMBER);
    
    PROCEDURE EXISTE_ADMIN_ID(P_USUARIO_ADMIN IN VARCHAR2 , V_EXISTE OUT NUMBER);
    
END PAQUETE_ADMINISTRADOR;

--IMPLEMENTACIÓN DEL PAQUETE

CREATE OR REPLACE PACKAGE BODY PAQUETE_ADMINISTRADOR IS

    --IMPLEMENTACIÓN DE LAS CRUDS
    PROCEDURE CREAR_ADMINISTRADOR(P_ID IN NUMBER, P_USUARIO_ADMIN IN VARCHAR2,
    P_NOMBRE1 IN VARCHAR2, P_NOMBRE2 IN VARCHAR2, P_APELLIDO1 IN VARCHAR2, P_APELLIDO2 IN VARCHAR2,
    P_FECHANACIMIENTO IN DATE, P_CONTRASENIA IN VARCHAR2, P_FECHACONTRATO IN DATE, P_TELEFONO IN VARCHAR2,
    P_CORREO IN VARCHAR2)
    IS
        TYPE ADMINISTRADOR_NUEVO IS RECORD
        (
            V_ID ADMINISTRADOR.ADM_ID%TYPE := P_ID,
            V_USUARIO_ADMIN ADMINISTRADOR.NOMBRE_USUARIO_ADMIN%TYPE := P_USUARIO_ADMIN,
            V_PRIMERNOMBRE ADMINISTRADOR.PRIMERNOMBRE%TYPE := P_NOMBRE1,
            V_SEGUNDONOMBRE ADMINISTRADOR.SEGUNDONOMBRE%TYPE := P_NOMBRE2,
            V_PRIMERAPELLIDO ADMINISTRADOR.PRIMERAPELLIDO%TYPE := P_APELLIDO1,
            V_SEGUNDOAPELLIDO ADMINISTRADOR.SEGUNDOAPELLIDO%TYPE := P_APELLIDO2,
            V_FECHANACIMIENTO ADMINISTRADOR.FECHANACIMIENTO%TYPE := P_FECHANACIMIENTO,
            V_CONTRASENIA ADMINISTRADOR.CONTRASENIA%TYPE := P_CONTRASENIA,
            V_FECHACONTRATO ADMINISTRADOR.FECHACONTRATO%TYPE := P_FECHACONTRATO,
            V_TELEFONO ADMINISTRADOR.TELEFONO%TYPE := P_TELEFONO,
            V_CORREO ADMINISTRADOR.CORREO%TYPE := P_CORREO
        );
    
        ADMIN_RECORD ADMINISTRADOR_NUEVO;
    
    BEGIN   
        INSERT INTO ADMINISTRADOR(ADM_ID, NOMBRE_USUARIO_ADMIN, PRIMERNOMBRE, SEGUNDONOMBRE, PRIMERAPELLIDO, SEGUNDOAPELLIDO,
        FECHANACIMIENTO, CONTRASENIA, FECHACONTRATO, TELEFONO, CORREO) 
        VALUES (ADMIN_RECORD.V_ID, ADMIN_RECORD.V_USUARIO_ADMIN, ADMIN_RECORD.V_PRIMERNOMBRE, ADMIN_RECORD.V_SEGUNDONOMBRE,
        ADMIN_RECORD.V_PRIMERAPELLIDO, ADMIN_RECORD.V_SEGUNDOAPELLIDO, ADMIN_RECORD.V_FECHANACIMIENTO, 
        ADMIN_RECORD.V_CONTRASENIA, ADMIN_RECORD.V_FECHACONTRATO, ADMIN_RECORD.V_TELEFONO, 
        ADMIN_RECORD.V_CORREO);
    END;
    
    PROCEDURE ACTUALIZAR_ADMINISTRADOR(P_CODIGO IN NUMBER, P_USUARIO_ADMIN IN VARCHAR2, P_NOMBRE1 IN VARCHAR2,
    P_NOMBRE2 IN VARCHAR2, P_APELLIDO1 IN VARCHAR2, P_APELLIDO2 IN VARCHAR2, P_CONTRASENIA IN VARCHAR2,
    P_TELEFONO IN VARCHAR2)
    AS
        TYPE ADMINISTRADOR_ACTUALIZAR IS RECORD
        (
            V_CODIGO ADMINISTRADOR.ADM_ID%TYPE := P_CODIGO,
            V_USUARIO_ADMIN ADMINISTRADOR.NOMBRE_USUARIO_ADMIN%TYPE := P_USUARIO_ADMIN,
            V_PRIMERNOMBRE ADMINISTRADOR.PRIMERNOMBRE%TYPE := P_NOMBRE1,
            V_SEGUNDONOMBRE ADMINISTRADOR.SEGUNDONOMBRE%TYPE := P_NOMBRE2,
            V_PRIMERAPELLIDO ADMINISTRADOR.PRIMERAPELLIDO%TYPE := P_APELLIDO1,
            V_SEGUNDOAPELLIDO ADMINISTRADOR.SEGUNDOAPELLIDO%TYPE := P_APELLIDO2,
            V_CONTRASENIA ADMINISTRADOR.CONTRASENIA%TYPE := P_CONTRASENIA,
            V_TELEFONO ADMINISTRADOR.TELEFONO%TYPE := P_TELEFONO
        );
    
        ADMIN_RECORD ADMINISTRADOR_ACTUALIZAR;
    BEGIN
        UPDATE ADMINISTRADOR A
        SET A.NOMBRE_USUARIO_ADMIN = ADMIN_RECORD.V_USUARIO_ADMIN, A.PRIMERNOMBRE = ADMIN_RECORD.V_PRIMERNOMBRE,
        A.SEGUNDONOMBRE = ADMIN_RECORD.V_SEGUNDONOMBRE, A.PRIMERAPELLIDO = ADMIN_RECORD.V_PRIMERAPELLIDO,
        A.SEGUNDOAPELLIDO = ADMIN_RECORD.V_SEGUNDOAPELLIDO, A.CONTRASENIA = ADMIN_RECORD.V_CONTRASENIA,
        A.TELEFONO = ADMIN_RECORD.V_TELEFONO
        WHERE A.CODIGO = ADMIN_RECORD.V_CODIGO;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO ACTUALIZAR. VERIFIQUE QUE SU CÓDIGO SEA CORRECTO');
    END;
    
    PROCEDURE ACTUALIZAR_SU(P_CONTRASENIA IN VARCHAR2 ,P_CONTRASENIA_NUEVA IN VARCHAR2)
    AS
        V_CONTRASENIA ADMINISTRADOR.CONTRASENIA%TYPE := P_CONTRASENIA;
        V_CONTRASENIA_NUEVA ADMINISTRADOR.CONTRASENIA%TYPE := P_CONTRASENIA_NUEVA;
        
        V_AUX ADMINISTRADOR.CONTRASENIA%TYPE;
        
        E_SU_ERRONEO EXCEPTION;
    BEGIN
    
        SELECT A.CONTRASENIA
        INTO V_AUX
        FROM ADMINISTRADOR A
        WHERE A.CODIGO = 1;
        
        IF(V_AUX = V_CONTRASENIA) THEN
            UPDATE ADMINISTRADOR A
            SET A.CONTRASENIA = V_CONTRASENIA_NUEVA
            WHERE A.CODIGO = 1;  
            
            DBMS_OUTPUT.PUT_LINE('SE HA ACTUALIZADO LA CONTRASEÑA');
            
        ELSE
            RAISE E_SU_ERRONEO;
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO ACTUALIZAR CONTACTE CON EL ADMINISTRADOR...');
        
        WHEN E_SU_ERRONEO THEN DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO ACTUALIZAR. LA CONTRASEÑA ES INCORRECTA...');
    END;
    
    PROCEDURE DESHABILITAR_ADMINISTRADOR(P_CODIGO IN NUMBER)
    AS
        V_CODIGO ADMINISTRADOR.CODIGO%TYPE := P_CODIGO;
        V_TIPOACCESO NUMBER(1);
    
        E_DESHABILITADA EXCEPTION;
        E_SUPERUSUARIO EXCEPTION;
    BEGIN
    
        SELECT A.TIPOACCESO
        INTO V_TIPOACCESO
        FROM ADMINISTRADOR A
        WHERE A.CODIGO = V_CODIGO;
    
        CASE
            WHEN (V_TIPOACCESO = 0) THEN
                RAISE E_SUPERUSUARIO;
            WHEN (V_TIPOACCESO = 1) THEN
                UPDATE ADMINISTRADOR A
                SET A.TIPOACCESO = '3'
                WHERE A.CODIGO = V_CODIGO;
                DBMS_OUTPUT.PUT_LINE('LA CUENTA HA SIDO DESHABILITADA.');
            WHEN (V_TIPOACCESO = 3) THEN
                RAISE E_DESHABILITADA;
        END CASE;
    EXCEPTION
    
        WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO DESHABILITAR. ' || 
        'VERIFIQUE QUE EL CÓDIGO SEA CORRECTO.');
    
        WHEN E_DESHABILITADA THEN DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO DESHABILITAR. ' || 
        'LA CUENTA YA HA SIDO DESHABILITADA.');
    
        WHEN E_SUPERUSUARIO THEN DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO DESHABILITAR. ' ||
        'NO SE PUEDE DESHABILITAR EL SUPER USUARIO.');
    END;
    
    --IMPLEMENTACIÓN DE LA PROYECCIÓN
    
    PROCEDURE PROYECTAR_ADMINISTRADORES (REG_ADMINISTRADORES OUT SYS_REFCURSOR)
    AS
    BEGIN
        OPEN REG_ADMINISTRADORES FOR
        SELECT CODIGO, ADM_ID, NOMBRE_USUARIO_ADMIN, PRIMERNOMBRE, PRIMERAPELLIDO,
        TELEFONO, CORREO
        FROM ADMINISTRADOR;
    END;
    
    --IMPLEMENTACIÓN DEL RETORNO DE DATOS
    
    PROCEDURE EXISTE_ADMIN(P_USUARIO_ADMIN IN VARCHAR2 , V_EXISTE OUT NUMBER)
    IS
    BEGIN
        SELECT COUNT(NOMBRE_USUARIO_ADMIN)
        INTO V_EXISTE
        FROM ADMINISTRADOR
        WHERE NOMBRE_USUARIO_ADMIN= P_USUARIO_ADMIN;
    END EXISTE_ADMIN;
    
    PROCEDURE EXISTE_ADMIN_ID(P_USUARIO_ADMIN IN VARCHAR2 , V_EXISTE OUT NUMBER)
    IS
    BEGIN
        SELECT COUNT(ADM_ID)
        INTO V_EXISTE
        FROM ADMINISTRADOR
        WHERE NOMBRE_USUARIO_ADMIN= P_USUARIO_ADMIN;
    END EXISTE_ADMIN_ID;
END;

----------------------------------------------------------------------------------
/*
    PAQUETE PARA LA LÓGICA DE CLIENTE
*/
----------------------------------------------------------------------------------

--CREACIÓN DE SECUENCIA Y TRIGGER PARA AUTOMATIZAR EL CÓDIGO

CREATE SEQUENCE CLIENTE_CODIGO_SECUENCIA START WITH 000001;

CREATE OR REPLACE TRIGGER CLIENTE_CODIGO_TRIGGER
    BEFORE INSERT ON CLIENTE
        FOR EACH ROW
    BEGIN
        SELECT CLIENTE_CODIGO_SECUENCIA.NEXTVAL
        INTO :NEW.CODIGO
        FROM DUAL;
END;

--DECLARACIÓN DEL PAQUETE

CREATE OR REPLACE PACKAGE PAQUETE_CLIENTE IS
    
    --CRUDS
    
    PROCEDURE CREAR_CLIENTE(P_USUARIO_CLIENTE IN VARCHAR2, P_NOMBRE1 IN VARCHAR2, P_NOMBRE2 IN VARCHAR2,
    P_APELLIDO1 IN VARCHAR2, P_APELLIDO2 IN VARCHAR2, P_FECHANACIMIENTO IN DATE, P_CONTRASENIA IN VARCHAR2,
    P_TELEFONO IN VARCHAR2, P_CORREO IN VARCHAR2);
    
    PROCEDURE ACTUALIZAR_CLIENTE(P_CODIGO IN NUMBER, P_USUARIO_CLIENTE IN VARCHAR2,
    P_NOMBRE1 IN VARCHAR2, P_NOMBRE2 IN VARCHAR2, P_APELLIDO1 IN VARCHAR2, P_APELLIDO2 IN VARCHAR2,
    P_FECHANACIMIENTO IN DATE, P_CONTRASENIA IN VARCHAR2, P_TELEFONO IN VARCHAR2,
    P_CORREO IN VARCHAR2);
    
    PROCEDURE DESHABILITAR_CLIENTE(P_CODIGO IN NUMBER);
    
    --PROYECCIÓN DE LOS REGISTROS
    
    PROCEDURE PROYECTAR_CLIENTES(REG_CLIENTES OUT SYS_REFCURSOR);
    
    PROCEDURE DATOS_CLIENTE(P_USUARIO_CLIENTE IN VARCHAR2, P_CODIGO OUT NUMBER, P_NOMBRE1 OUT VARCHAR2,
    P_NOMBRE2 OUT VARCHAR2, P_APELLIDO1 OUT VARCHAR2, P_APELLIDO2 OUT VARCHAR2, P_EMAIL OUT VARCHAR2, P_PLAN OUT VARCHAR2,
    P_PRECIO OUT NUMBER, P_TARJETA OUT VARCHAR2, P_TIPO OUT VARCHAR2);
    
    --RETORNAR DE LA TABLA
    
    PROCEDURE EXISTE_CLIENTE(P_USUARIO_CLIENTE IN VARCHAR2 , V_EXISTE OUT NUMBER);
    
END PAQUETE_CLIENTE;

--IMPLEMENTACIÓN DEL PAQUETE

CREATE OR REPLACE PACKAGE BODY PAQUETE_CLIENTE IS
    
    --IMPLEMENTACIÓN DE LAS CRUDS
    
    PROCEDURE CREAR_CLIENTE(P_USUARIO_CLIENTE IN VARCHAR2, P_NOMBRE1 IN VARCHAR2, P_NOMBRE2 IN VARCHAR2,
    P_APELLIDO1 IN VARCHAR2, P_APELLIDO2 IN VARCHAR2, P_FECHANACIMIENTO IN DATE, P_CONTRASENIA IN VARCHAR2,
    P_TELEFONO IN VARCHAR2, P_CORREO IN VARCHAR2)
    AS
        
        TYPE CLIENTE_RECORD IS RECORD
        (
            V_USUARIO_CLIENTE CLIENTE.NOMBRE_USUARIO_CLIENTE%TYPE := P_USUARIO_CLIENTE,
            V_PRIMERNOMBRE CLIENTE.PRIMERNOMBRE%TYPE := P_NOMBRE1,
            V_SEGUNDONOMBRE CLIENTE.SEGUNDONOMBRE%TYPE := P_NOMBRE2,
            V_PRIMERAPELLIDO CLIENTE.PRIMERAPELLIDO%TYPE := P_APELLIDO1,
            V_SEGUNDOAPELLIDO CLIENTE.SEGUNDOAPELLIDO%TYPE := P_APELLIDO2,
            V_FECHANACIMIENTO CLIENTE.FECHANACIMIENTO%TYPE := P_FECHANACIMIENTO,
            V_CONTRASENIA CLIENTE.CONTRASENIA%TYPE := P_CONTRASENIA,
            V_TELEFONO CLIENTE.TELEFONO%TYPE := P_TELEFONO,
            V_CORREO CLIENTE.TELEFONO%TYPE := P_CORREO
        );   
        CLIENTE_NUEVO CLIENTE_RECORD;
    
    BEGIN
        IF (FLOOR(MONTHS_BETWEEN(SYSDATE,  CLIENTE_NUEVO.V_FECHANACIMIENTO)/12) >= 18) THEN
            INSERT INTO CLIENTE(NOMBRE_USUARIO_CLIENTE, PRIMERNOMBRE, SEGUNDONOMBRE, PRIMERAPELLIDO, SEGUNDOAPELLIDO,
            FECHANACIMIENTO, CONTRASENIA, TELEFONO, CORREO)
            VALUES(CLIENTE_NUEVO.V_USUARIO_CLIENTE, CLIENTE_NUEVO.V_PRIMERNOMBRE, CLIENTE_NUEVO.V_SEGUNDONOMBRE,
            CLIENTE_NUEVO.V_PRIMERAPELLIDO, CLIENTE_NUEVO.V_SEGUNDOAPELLIDO, CLIENTE_NUEVO.V_FECHANACIMIENTO, 
            CLIENTE_NUEVO.V_CONTRASENIA, CLIENTE_NUEVO.V_TELEFONO, CLIENTE_NUEVO.V_CORREO);
        ELSE
            DBMS_OUTPUT.PUT_LINE('NO SE PUEDE CREAR EL USUARIO, TIENE QUE SER MAYOR DE EDAD...');
        END IF;
    END;
    
    PROCEDURE ACTUALIZAR_CLIENTE(P_CODIGO IN NUMBER, P_USUARIO_CLIENTE IN VARCHAR2, P_NOMBRE1 IN VARCHAR2,
    P_NOMBRE2 IN VARCHAR2, P_APELLIDO1 IN VARCHAR2, P_APELLIDO2 IN VARCHAR2, P_FECHANACIMIENTO IN DATE,
    P_CONTRASENIA IN VARCHAR2, P_TELEFONO IN VARCHAR2, P_CORREO IN VARCHAR2)
    AS
        TYPE CLIENTE_ACTUALIZAR IS RECORD
        (
            V_CODIGO CLIENTE.CODIGO%TYPE := P_CODIGO,
            V_USUARIO_CLIENTE CLIENTE.NOMBRE_USUARIO_CLIENTE%TYPE := P_USUARIO_CLIENTE,
            V_PRIMERNOMBRE CLIENTE.PRIMERNOMBRE%TYPE := P_NOMBRE1,
            V_SEGUNDONOMBRE CLIENTE.SEGUNDONOMBRE%TYPE := P_NOMBRE2,
            V_PRIMERAPELLIDO CLIENTE.PRIMERAPELLIDO%TYPE := P_APELLIDO1,
            V_SEGUNDOAPELLIDO CLIENTE.SEGUNDOAPELLIDO%TYPE := P_APELLIDO2,
            V_FECHANACIMIENTO CLIENTE.FECHANACIMIENTO%TYPE := P_FECHANACIMIENTO,
            V_CONTRASENIA CLIENTE.CONTRASENIA%TYPE := P_CONTRASENIA,
            V_TELEFONO CLIENTE.TELEFONO%TYPE := P_TELEFONO,
            V_CORREO CLIENTE.TELEFONO%TYPE := P_CORREO
        );   
        CLIENTE_RECORD CLIENTE_ACTUALIZAR;
    BEGIN
        UPDATE CLIENTE E
        SET E.NOMBRE_USUARIO_CLIENTE = CLIENTE_RECORD.V_USUARIO_CLIENTE, E.PRIMERNOMBRE = CLIENTE_RECORD.V_PRIMERNOMBRE,
        E.SEGUNDONOMBRE = CLIENTE_RECORD.V_SEGUNDONOMBRE, E.PRIMERAPELLIDO = CLIENTE_RECORD.V_PRIMERAPELLIDO,
        E.SEGUNDOAPELLIDO = CLIENTE_RECORD.V_SEGUNDOAPELLIDO, E.FECHANACIMIENTO = CLIENTE_RECORD.V_FECHANACIMIENTO,
        E.CONTRASENIA = CLIENTE_RECORD.V_CONTRASENIA, E.TELEFONO = CLIENTE_RECORD.V_TELEFONO, E.CORREO = CLIENTE_RECORD.V_CORREO
        WHERE E.CODIGO = CLIENTE_RECORD.V_CODIGO;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO ACTUALIZAR. 
        VERIFIQUE QUE SU CÓDIGO SEA CORRECTO');
    END;
    
    PROCEDURE DESHABILITAR_CLIENTE(P_CODIGO IN NUMBER)
    AS
        V_CODIGO CLIENTE.CODIGO%TYPE := P_CODIGO;
        V_TIPOACCESO NUMBER(1);
    
        E_DESHABILITADA EXCEPTION;
    BEGIN
    
        SELECT C.TIPOACCESO
        INTO V_TIPOACCESO
        FROM CLIENTE C
        WHERE C.CODIGO = V_CODIGO;
    
        CASE
            WHEN (V_TIPOACCESO = 2) THEN
                UPDATE CLIENTE C
                SET C.TIPOACCESO = '3'
                WHERE C.CODIGO = V_CODIGO;
                DBMS_OUTPUT.PUT_LINE('LA CUENTA HA SIDO DESHABILITADA.');
            WHEN (V_TIPOACCESO = 3) THEN
                RAISE E_DESHABILITADA;
        END CASE;
    EXCEPTION
    
        WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO DESHABILITAR. ' || 
        'VERIFIQUE QUE EL CÓDIGO SEA CORRECTO.');
    
        WHEN E_DESHABILITADA THEN DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO DESHABILITAR. ' || 
        'LA CUENTA YA HA SIDO DESHABILITADA.');
    END;
    
    --IMPLEMENTACIÓN DE LA PROYECCIÓN
    
    PROCEDURE PROYECTAR_CLIENTES (REG_CLIENTES OUT SYS_REFCURSOR)
    AS
    BEGIN
        OPEN REG_CLIENTES FOR SELECT C.CODIGO, C.NOMBRE_USUARIO_CLIENTE, C.PRIMERNOMBRE, C.PRIMERAPELLIDO, C.TELEFONO, C.CORREO
        FROM CLIENTE C;
    END;
    
    --IMPLEMENTACIÓN DEL RETORNO DE DATOS
    
    PROCEDURE DATOS_CLIENTE(P_USUARIO_CLIENTE IN VARCHAR2, P_CODIGO OUT NUMBER, P_NOMBRE1 OUT VARCHAR2,
    P_NOMBRE2 OUT VARCHAR2, P_APELLIDO1 OUT VARCHAR2, P_APELLIDO2 OUT VARCHAR2, P_EMAIL OUT VARCHAR2, P_PLAN OUT VARCHAR2,
    P_PRECIO OUT NUMBER, P_TARJETA OUT VARCHAR2, P_TIPO OUT VARCHAR2)
    AS
        V_USUARIO CLIENTE.NOMBRE_USUARIO_CLIENTE%TYPE;
    BEGIN
       SELECT C.CODIGO, C.PRIMERNOMBRE, C.SEGUNDONOMBRE, C.PRIMERAPELLIDO, C.SEGUNDOAPELLIDO, C.CORREO, P.NOMBRE,
       P.PRECIO, T.NUMEROTARJETA, T.TIPOTARJETA
       INTO P_CODIGO, P_NOMBRE1, P_NOMBRE2, P_APELLIDO1, P_APELLIDO2, P_EMAIL, P_PLAN, P_PRECIO, P_TARJETA, P_TIPO  
       FROM CLIENTE C INNER JOIN CLIENTE_PLAN CP ON CP.CODIGO_CLIENTE = C.CODIGO INNER JOIN PLANSUSCRIPCION P
       ON P.CODIGO = CP.CODIGO_PLAN INNER JOIN TARJETA T ON T.CLIENTE = C.CODIGO
       WHERE C.NOMBRE_USUARIO_CLIENTE = P_USUARIO_CLIENTE;
    END;
    
    PROCEDURE EXISTE_CLIENTE(P_USUARIO_CLIENTE IN VARCHAR2 , V_EXISTE OUT NUMBER)
    IS
    BEGIN
        SELECT COUNT( NOMBRE_USUARIO_CLIENTE)
        INTO V_EXISTE
        FROM CLIENTE
        WHERE NOMBRE_USUARIO_CLIENTE = P_USUARIO_CLIENTE;
    END;
    
END PAQUETE_CLIENTE;

----------------------------------------------------------------------------------
/*
    PAQUETE PARA LA LÓGICA DE ACTOR
*/
----------------------------------------------------------------------------------

--CREACIÓN DE SECUENCIA Y TRIGGER PARA AUTOMATIZAR EL CÓDIGO

CREATE SEQUENCE ACTOR_CODIGO_SECUENCIA START WITH 000001;

CREATE OR REPLACE TRIGGER ACTOR_CODIGO_TRIGGER
    BEFORE INSERT ON ACTOR
        FOR EACH ROW
    BEGIN
        SELECT ACTOR_CODIGO_SECUENCIA.NEXTVAL
        INTO :NEW.CODIGO
        FROM DUAL;
END;

--DECLARACIÓN DEL PAQUETE

CREATE OR REPLACE PACKAGE PAQUETE_ACTOR IS
    --CRUDS
    
    PROCEDURE CREAR_ACTOR(P_NOMBRE1 IN VARCHAR2, P_NOMBRE2 IN VARCHAR2, P_APELLIDO1 IN VARCHAR2,
    P_APELLIDO2 IN VARCHAR2, P_FECHANACIMIENTO IN DATE);
    
    PROCEDURE ACTUALIZAR_ACTOR(P_CODIGO IN NUMBER, P_NOMBRE1 IN VARCHAR2, P_NOMBRE2 IN VARCHAR2,
    P_APELLIDO1 IN VARCHAR2, P_APELLIDO2 IN VARCHAR2, P_FECHANACIMIENTO IN DATE);
    
    --PROYECCIÓN DE LOS REGISTROS
    
    PROCEDURE PROYECTAR_ACTORES (REG_ACTORES OUT SYS_REFCURSOR);
    
END PAQUETE_ACTOR;

--IMPLEMENTACIÓN DEL PAQUETE

CREATE OR REPLACE PACKAGE BODY PAQUETE_ACTOR IS
    --IMPLEMENTACIÓN DE LAS CRUDS
    
    PROCEDURE CREAR_ACTOR(P_NOMBRE1 IN VARCHAR2, P_NOMBRE2 IN VARCHAR2, P_APELLIDO1 IN VARCHAR2, P_APELLIDO2 IN VARCHAR2,
    P_FECHANACIMIENTO IN DATE)
    AS
        TYPE RECORD_ACTOR IS RECORD
        (
            V_PRIMERNOMBRE ACTOR.PRIMERNOMBRE%TYPE := P_NOMBRE1,
            V_SEGUNDONOMBRE ACTOR.SEGUNDONOMBRE%TYPE := P_NOMBRE2,
            V_PRIMERAPELLIDO ACTOR.PRIMERAPELLIDO%TYPE := P_APELLIDO1,
            V_SEGUNDOAPELLIDO ACTOR.SEGUNDOAPELLIDO%TYPE := P_APELLIDO2,
            V_FECHANACIMIENTO ACTOR.FECHANACIMIENTO%TYPE := P_FECHANACIMIENTO
        );
    
        ACTOR_NUEVO RECORD_ACTOR;
    BEGIN
    
        INSERT INTO ACTOR(PRIMERNOMBRE, SEGUNDONOMBRE, PRIMERAPELLIDO, SEGUNDOAPELLIDO, FECHANACIMIENTO) 
        VALUES(ACTOR_NUEVO.V_PRIMERNOMBRE, ACTOR_NUEVO.V_SEGUNDONOMBRE, ACTOR_NUEVO.V_PRIMERAPELLIDO,
        ACTOR_NUEVO.V_SEGUNDOAPELLIDO, ACTOR_NUEVO.V_FECHANACIMIENTO);
    END;
    
    PROCEDURE ACTUALIZAR_ACTOR(P_CODIGO IN NUMBER, P_NOMBRE1 IN VARCHAR2, P_NOMBRE2 IN VARCHAR2,
    P_APELLIDO1 IN VARCHAR2, P_APELLIDO2 IN VARCHAR2, P_FECHANACIMIENTO IN DATE)
    AS
        TYPE RECORD_ACTOR IS RECORD
        (
            V_CODIGO ACTOR.CODIGO%TYPE := P_CODIGO,
            V_PRIMERNOMBRE ACTOR.PRIMERNOMBRE%TYPE := P_NOMBRE1,
            V_SEGUNDONOMBRE ACTOR.SEGUNDONOMBRE%TYPE := P_NOMBRE2,
            V_PRIMERAPELLIDO ACTOR.PRIMERAPELLIDO%TYPE := P_APELLIDO1,
            V_SEGUNDOAPELLIDO ACTOR.SEGUNDOAPELLIDO%TYPE := P_APELLIDO2,
            V_FECHANACIMIENTO ACTOR.FECHANACIMIENTO%TYPE := P_FECHANACIMIENTO
        );
    
        ACTOR_ACTUALIZADO RECORD_ACTOR;
    BEGIN
        UPDATE ACTOR AC
        SET PRIMERNOMBRE = ACTOR_ACTUALIZADO.V_PRIMERNOMBRE, SEGUNDONOMBRE = ACTOR_ACTUALIZADO.V_SEGUNDONOMBRE,
        PRIMERAPELLIDO = ACTOR_ACTUALIZADO.V_PRIMERAPELLIDO, SEGUNDOAPELLIDO = ACTOR_ACTUALIZADO.V_SEGUNDOAPELLIDO,
        FECHANACIMIENTO = ACTOR_ACTUALIZADO.V_FECHANACIMIENTO
        WHERE AC.CODIGO = ACTOR_ACTUALIZADO.V_CODIGO;  
    EXCEPTION
        WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO ACTUALIZAR. 
        VERIFIQUE QUE SU CÓDIGO SEA CORRECTO');
    END;
    
    --IMPLEMENTACIÓN DE LA PROYECCIÓN DE LOS REGISTROS
    
    PROCEDURE PROYECTAR_ACTORES (REG_ACTORES OUT SYS_REFCURSOR)
    AS
    BEGIN
        OPEN REG_ACTORES FOR SELECT CODIGO, PRIMERNOMBRE,  PRIMERAPELLIDO FROM ACTOR;
    END;
    
END PAQUETE_ACTOR;


----------------------------------------------------------------------------------
/*
    PAQUETE PARA LA LÓGICA DE LAS TARJETAS
*/
----------------------------------------------------------------------------------

--CREACIÓN DE SECUENCIA Y TRIGGER PARA AUTOMATIZAR EL CÓDIGO

CREATE SEQUENCE TARJETA_CODIGO_SECUENCIA START WITH 000001;

CREATE OR REPLACE TRIGGER TARJETA_CODIGO_TRIGGER
    BEFORE INSERT ON TARJETA
        FOR EACH ROW
    BEGIN
        SELECT TARJETA_CODIGO_SECUENCIA.NEXTVAL
        INTO :NEW.CODIGO
        FROM DUAL;
END;

--DECLARACIÓN DEL PAQUETE

CREATE OR REPLACE PACKAGE PAQUETE_TARJETA IS
    
    --CRUDS
    
    PROCEDURE REGISTRAR_TARJETA(P_USUARIO_CLIENTE IN VARCHAR2, P_NUMEROTARJETA IN VARCHAR2,
    P_FECHAEXP IN DATE, P_NOMBRETARJETA IN VARCHAR2, P_CVV IN VARCHAR2, P_TIPOTARJETA IN VARCHAR2);
    
    PROCEDURE ACTUALIZAR_TARJETA(P_CODIGO IN NUMBER, P_NUMEROTARJETA IN VARCHAR2,
    P_FECHAEXP IN DATE, P_NOMBRETARJETA IN VARCHAR2, P_CVV IN VARCHAR2, P_TIPOTARJETA IN VARCHAR2);    
    
END PAQUETE_TARJETA;

--IMPLEMENTACIÓN DEL PAQUETE

CREATE OR REPLACE PACKAGE BODY PAQUETE_TARJETA IS
    --IMPLEMENTACIÓN DE LAS CRUDS
    
    PROCEDURE REGISTRAR_TARJETA(P_USUARIO_CLIENTE IN VARCHAR2,
    P_NUMEROTARJETA IN VARCHAR2, P_FECHAEXP IN DATE, P_NOMBRETARJETA IN VARCHAR2, P_CVV IN VARCHAR2,
    P_TIPOTARJETA IN VARCHAR2)
    AS
        TYPE RECORD_TARJETA IS RECORD
        (
            V_USUARIO TARJETA.NOMBRE_USUARIO_CLIENTE%TYPE := P_USUARIO_CLIENTE,
            V_CODIGO TARJETA.CLIENTE%TYPE,
            V_NUMEROTARJETA TARJETA.NUMEROTARJETA%TYPE := P_NUMEROTARJETA,
            V_FECHAEXP TARJETA.FECHAEXP%TYPE := P_FECHAEXP,
            V_NOMBRETARJETA TARJETA.NOMBRETARJETA%TYPE := P_NOMBRETARJETA,
            V_CVV TARJETA.CVV%TYPE := P_CVV,
            V_TIPOTARJETA TARJETA.TIPOTARJETA%TYPE := P_TIPOTARJETA
        );
    
        TARJETA_NUEVA RECORD_TARJETA;
    
    BEGIN
        SELECT C.CODIGO
        INTO TARJETA_NUEVA.V_CODIGO
        FROM CLIENTE C 
        WHERE C.NOMBRE_USUARIO_CLIENTE = P_USUARIO_CLIENTE;
    
        INSERT INTO TARJETA(NOMBRE_USUARIO_CLIENTE, CLIENTE, NUMEROTARJETA, FECHAEXP, NOMBRETARJETA, CVV, TIPOTARJETA)
        VALUES(TARJETA_NUEVA.V_USUARIO, TARJETA_NUEVA.V_CODIGO, TARJETA_NUEVA.V_NUMEROTARJETA, TARJETA_NUEVA.V_FECHAEXP,
        TARJETA_NUEVA.V_NOMBRETARJETA, TARJETA_NUEVA.V_CVV, TARJETA_NUEVA.V_TIPOTARJETA);
    
    END;
    
    PROCEDURE ACTUALIZAR_TARJETA(P_CODIGO IN NUMBER, P_NUMEROTARJETA IN VARCHAR2,
    P_FECHAEXP IN DATE, P_NOMBRETARJETA IN VARCHAR2, P_CVV IN VARCHAR2, P_TIPOTARJETA IN VARCHAR2)
    AS
        TYPE RECORD_TARJETA IS RECORD
        (
            V_CODIGO TARJETA.CODIGO%TYPE := P_CODIGO,
            V_NUMEROTARJETA TARJETA.NUMEROTARJETA%TYPE := P_NUMEROTARJETA,
            V_FECHAEXP TARJETA.FECHAEXP%TYPE := P_FECHAEXP,
            V_NOMBRETARJETA TARJETA.NOMBRETARJETA%TYPE := P_NOMBRETARJETA,
            V_CVV TARJETA.CVV%TYPE := P_CVV,
            V_TIPOTARJETA TARJETA.TIPOTARJETA%TYPE := P_TIPOTARJETA
        );
    
        TARJETA_ACTUALIZADA RECORD_TARJETA;
    BEGIN
        UPDATE TARJETA T
        SET T.NUMEROTARJETA = TARJETA_ACTUALIZADA.V_NUMEROTARJETA, T.FECHAEXP = TARJETA_ACTUALIZADA.V_FECHAEXP,
        T.NOMBRETARJETA = TARJETA_ACTUALIZADA.V_NOMBRETARJETA, T.CVV = TARJETA_ACTUALIZADA.V_CVV,
        T.TIPOTARJETA = TARJETA_ACTUALIZADA.V_TIPOTARJETA
        WHERE T.CODIGO = TARJETA_ACTUALIZADA.V_CODIGO;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO ACTUALIZAR. 
        VERIFIQUE QUE SU CÓDIGO SEA CORRECTO');
    END;
    
END PAQUETE_TARJETA;

----------------------------------------------------------------------------------
/*
    PAQUETE PARA LA LÓGICA DE LOS PLANES
*/
----------------------------------------------------------------------------------

--DECLARACIÓN DEL PAQUETE

CREATE OR REPLACE PACKAGE PAQUETE_PLAN IS
    --CRUDS
    
    PROCEDURE ACTUALIZAR_PLAN(P_CODIGO IN NUMBER, P_NOMBRE IN VARCHAR2, P_PRECIO IN NUMBER);
    
END PAQUETE_PLAN;

--IMPLEMENTACIÓN DEL PAQUETE

CREATE OR REPLACE PACKAGE BODY PAQUETE_PLAN IS
    --IMPLEMENTACIÓN DE LAS CRUDS
    
    PROCEDURE ACTUALIZAR_PLAN(P_CODIGO IN NUMBER, P_NOMBRE IN VARCHAR2, P_PRECIO IN NUMBER)
    AS
        TYPE RECORD_PLAN IS RECORD
        (
            V_CODIGO PLANSUSCRIPCION.CODIGO%TYPE := P_CODIGO,
            V_NOMBRE PLANSUSCRIPCION.NOMBRE%TYPE := P_NOMBRE,
            V_PRECIO PLANSUSCRIPCION.PRECIO%TYPE := P_PRECIO
        );
        PLAN_ACTUALIZADO RECORD_PLAN;
    BEGIN
    
        UPDATE PLANSUSCRIPCION PS SET PS.NOMBRE = PLAN_ACTUALIZADO.V_NOMBRE, PS.PRECIO = PLAN_ACTUALIZADO.V_PRECIO
        WHERE PS.CODIGO = PLAN_ACTUALIZADO.V_CODIGO;
    
    END;
    
END PAQUETE_PLAN;

----------------------------------------------------------------------------------
/*
    PAQUETE PARA LA LÓGICA DE CLIENTE_PRODUCTO
*/
----------------------------------------------------------------------------------

--CREACIÓN DE SECUENCIA Y TRIGGER PARA AUTOMATIZAR EL CÓDIGO

CREATE SEQUENCE REPRODUCCION_CODIGO_SECUENCIA START WITH 000001;

CREATE OR REPLACE TRIGGER REPRODUCCION_CODIGO_TRIGGER
    BEFORE INSERT ON CLIENTE_PRODUCTO
        FOR EACH ROW
    BEGIN
        SELECT REPRODUCCION_CODIGO_SECUENCIA.NEXTVAL
        INTO :NEW.CODIGO_REPRODUCCION
        FROM DUAL;
END;

--DECLARACIÓN DEL PAQUETE

CREATE OR REPLACE PACKAGE PAQUETE_REPRODUCCION IS
    --CRUDS
    
    PROCEDURE REGISTRAR_REPRODUCCION(P_COD_CLIENTE IN NUMBER, P_COD_PRODUCTO IN NUMBER);
    
END PAQUETE_REPRODUCCION;

--IMPLEMENTACIÓN DEL PAQUETE

CREATE OR REPLACE PACKAGE BODY PAQUETE_REPRODUCCION IS
    --IMPLEMENTACIÓN DE LAS CRUDS
    
    PROCEDURE REGISTRAR_REPRODUCCION(P_COD_CLIENTE IN NUMBER, P_COD_PRODUCTO IN NUMBER)
    AS
        TYPE RECORD_RESPRODUCCION IS RECORD
        (
            V_COD_CLIENTE CLIENTE_PRODUCTO.CODIGO_CLIENTE%TYPE := P_COD_CLIENTE,
            V_COD_PRODUCTO CLIENTE_PRODUCTO.CODIGO_PRODUCTO%TYPE := P_COD_PRODUCTO
        );
        RESPRODUCCION_NUEVA RECORD_RESPRODUCCION;
    BEGIN
        INSERT INTO CLIENTE_PRODUCTO(CODIGO_CLIENTE, CODIGO_PRODUCTO) VALUES(RESPRODUCCION_NUEVA.V_COD_CLIENTE,
        RESPRODUCCION_NUEVA.V_COD_PRODUCTO);
    END;
    
END PAQUETE_REPRODUCCION;


----------------------------------------------------------------------------------
/*
    PAQUETE PARA LA LÓGICA DE CLIENTE_PLAN
*/
----------------------------------------------------------------------------------

--CREACIÓN DE SECUENCIA Y TRIGGER PARA AUTOMATIZAR EL CÓDIGO

CREATE SEQUENCE SUSCRIPCION_CODIGO_SECUENCIA START WITH 000001;

CREATE OR REPLACE TRIGGER SUSCRIPCION_CODIGO_TRIGGER
    BEFORE INSERT ON CLIENTE_PLAN
        FOR EACH ROW
    DECLARE
        V_FECHA_VENCIMIENTO DATE;
    BEGIN
        SELECT SUSCRIPCION_CODIGO_SECUENCIA.NEXTVAL
        INTO :NEW.CODIGO
        FROM DUAL;   
END;

--DECLARACIÓN DEL PAQUETE

CREATE OR REPLACE PACKAGE PAQUETE_SUSCRIPCION IS
    --CRUDS
    
    PROCEDURE REGISTRAR_SUSCRIPCION(P_USUARIO_CLIENTE IN VARCHAR2, P_CODIGO_PLAN IN NUMBER);
    
    --RETORNAR DE LA TABLA
    
    PROCEDURE PRECIO_SUSCRIPCION(P_CODIGO_PLAN IN NUMBER , V_PRECIO OUT NUMBER);
    
    FUNCTION VALIDAR_VIGENCIA_PLAN(P_CLIENTE_COD IN NUMBER, P_FECHA_COMPRA IN DATE) RETURN NUMBER;
    
END PAQUETE_SUSCRIPCION;

--IMPLEMENTACIÓN DEL PAQUETE

CREATE OR REPLACE PACKAGE BODY PAQUETE_SUSCRIPCION IS
    --IMPLEMENTACIÓN DE LAS CRUDS
    
    PROCEDURE REGISTRAR_SUSCRIPCION(P_USUARIO_CLIENTE IN VARCHAR2, P_CODIGO_PLAN IN NUMBER)
    AS
        TYPE SUSCRIPCION_RECORD IS RECORD
        (
            V_CODIGO_CLIENTE CLIENTE_PLAN.CODIGO_CLIENTE%TYPE,
            V_CODIGO_PLAN CLIENTE_PLAN.CODIGO_PLAN%TYPE := P_CODIGO_PLAN,
            V_FECHA_VENCIMIENTO CLIENTE_PLAN.FECHA_VENCIMIENTO%TYPE
        );
    
        V_ENCONTRADO NUMBER := 0;
    
        SUSCRIPCION_NUEVA SUSCRIPCION_RECORD;
    BEGIN
    
        SELECT CODIGO
        INTO SUSCRIPCION_NUEVA.V_CODIGO_CLIENTE
        FROM CLIENTE
        WHERE NOMBRE_USUARIO_CLIENTE = P_USUARIO_CLIENTE;
    
        --V_ENCONTRADO := VALIDAR_VIGENCIA_PLAN(SUSCRIPCION_NUEVA.V_CODIGO_CLIENTE, TO_CHAR(SYSDATE));
        --DBMS_OUTPUT.PUT_LINE(V_ENCONTRADO);
    
    
        IF (V_ENCONTRADO = 0) THEN
            CASE
                WHEN (SUSCRIPCION_NUEVA.V_CODIGO_PLAN = 1) THEN
                    INSERT INTO CLIENTE_PLAN(CODIGO_CLIENTE, CODIGO_PLAN, FECHA_VENCIMIENTO)
                    VALUES (SUSCRIPCION_NUEVA.V_CODIGO_CLIENTE, SUSCRIPCION_NUEVA.V_CODIGO_PLAN, 
                    (SYSDATE + 7));   
                WHEN (SUSCRIPCION_NUEVA.V_CODIGO_PLAN = 2) THEN
                    INSERT INTO CLIENTE_PLAN(CODIGO_CLIENTE, CODIGO_PLAN, FECHA_VENCIMIENTO)
                    VALUES (SUSCRIPCION_NUEVA.V_CODIGO_CLIENTE, SUSCRIPCION_NUEVA.V_CODIGO_PLAN,
                    (SYSDATE + 30));
                WHEN (SUSCRIPCION_NUEVA.V_CODIGO_PLAN = 3) THEN
                    INSERT INTO CLIENTE_PLAN(CODIGO_CLIENTE, CODIGO_PLAN, FECHA_VENCIMIENTO)
                    VALUES (SUSCRIPCION_NUEVA.V_CODIGO_CLIENTE, SUSCRIPCION_NUEVA.V_CODIGO_PLAN, 
                    (SYSDATE + 365));
            END CASE;
        ELSE
            DBMS_OUTPUT.PUT_LINE('AÚN HAY UN PLAN VIGENTE...');
        END IF;
    END;
       
    --IMPLEMENTACIÓN DEL RETORNAR DE LA TABLA
    
    PROCEDURE PRECIO_SUSCRIPCION( P_CODIGO_PLAN IN NUMBER , V_PRECIO OUT NUMBER)
    AS
    BEGIN
      SELECT PRECIO
      INTO V_PRECIO
      FROM PLANSUSCRIPCION
      WHERE CODIGO = P_CODIGO_PLAN;
    END PRECIO_SUSCRIPCION;
    
    FUNCTION VALIDAR_VIGENCIA_PLAN(P_CLIENTE_COD IN NUMBER, P_FECHA_COMPRA IN DATE)
    RETURN NUMBER
    AS
        V_FECHA_COMPRA CLIENTE_PLAN.FECHA_COMPRA%TYPE := P_FECHA_COMPRA;
        V_FECHA_VENCIMIENTO CLIENTE_PLAN.FECHA_VENCIMIENTO%TYPE;
        V_CLIENTE_COD CLIENTE_PLAN.CODIGO%TYPE := P_CLIENTE_COD;
        V_CONTADOR NUMBER := 0;
    BEGIN
        SELECT C.CODIGO_CLIENTE, C.FECHA_COMPRA, C.FECHA_VENCIMIENTO, COUNT(C.CODIGO_CLIENTE)
        INTO V_CLIENTE_COD, V_FECHA_COMPRA, V_FECHA_VENCIMIENTO, V_CONTADOR
        FROM CLIENTE_PLAN C
        WHERE C.CODIGO_CLIENTE = V_CLIENTE_COD AND TRUNC (C.FECHA_COMPRA) = V_FECHA_COMPRA
        GROUP BY C.CODIGO_CLIENTE, C.FECHA_COMPRA, C.FECHA_VENCIMIENTO;
        
        IF (V_FECHA_VENCIMIENTO > SYSDATE) THEN
            RETURN 1;
            DBMS_OUTPUT.PUT_LINE('SE HA ENCONTRADO');
        END IF;
           
        IF (V_CONTADOR = 0) THEN
            RETURN 0;
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 0;
    END;
    
END PAQUETE_SUSCRIPCION;


----------------------------------------------------------------------------------
/*
    PAQUETE PARA LA LÓGICA DE PRODUCTO
*/
----------------------------------------------------------------------------------

--CREACIÓN DE SECUENCIA Y TRIGGER PARA AUTOMATIZAR EL CÓDIGO

CREATE SEQUENCE PRODUCTO_CODIGO_SECUENCIA START WITH 000001;

CREATE OR REPLACE TRIGGER PRODUCTO_CODIGO_TRIGGER
    BEFORE INSERT ON PRODUCTO
        FOR EACH ROW
    BEGIN
        SELECT PRODUCTO_CODIGO_SECUENCIA.NEXTVAL
        INTO :NEW.CODIGO
        FROM DUAL;   
END;

--DECLARACIÓN DEL PAQUETE

CREATE OR REPLACE PACKAGE PAQUETE_PRODUCTO IS
    --CRUDS
    
    PROCEDURE REGISTRAR_PRODUCTOS(P_CODIGO_ADMIN IN NUMBER, P_PORTADA IN VARCHAR2, P_VIDEO IN VARCHAR2, P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2, P_FECHAESTRENO IN DATE, P_DURACION IN VARCHAR2, P_GENERO IN VARCHAR2, P_TIPO_PRODUCTO IN VARCHAR2);
    
    PROCEDURE ACTUALIZAR_PRODUCTOS(P_COD_PELICULA IN NUMBER, P_CODIGO_ADMIN IN NUMBER, P_PORTADA IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2, P_FECHAESTRENO IN DATE, P_DURACION IN VARCHAR2, P_GENERO IN VARCHAR2);
    
    PROCEDURE DESHABILITAR_PRODUCTO(P_CODIGO IN NUMBER);
    
    --PROYECCIÓN DE LOS REGISTROS
    
    PROCEDURE PROYECTAR_PRODUCTOS(REG_PRODUCTOS OUT SYS_REFCURSOR);
    
    --RETORNAR DE LA TABLA
    
    PROCEDURE DATOS_PRODUCTOS(P_TITULO IN VARCHAR2 ,REG_ACTORES OUT SYS_REFCURSOR);
    PROCEDURE DATOS_PRODUCTOS2(P_TITULO IN VARCHAR2 ,REG_DETALLES OUT SYS_REFCURSOR);
    
END PAQUETE_PRODUCTO;

--IMPLEMENTACIÓN DEL PAQUETE

CREATE OR REPLACE PACKAGE BODY PAQUETE_PRODUCTO IS
    --IMPLEMENTACIÓN DE LAS CRUDS
    PROCEDURE REGISTRAR_PRODUCTOS(P_CODIGO_ADMIN IN NUMBER, P_PORTADA IN VARCHAR2, P_VIDEO IN VARCHAR2, P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2, P_FECHAESTRENO IN DATE, P_DURACION IN VARCHAR2, P_GENERO IN VARCHAR2, P_TIPO_PRODUCTO IN VARCHAR2)
    AS
        V_CODIGO_ADMIN PRODUCTO.CODIGO_ADMIN%TYPE := P_CODIGO_ADMIN;
         
        V_BFILE_IMAGEN BFILE;
        V_BLOB_IMAGEN BLOB; 
        
        V_BFILE_VIDEO BFILE;
        V_BLOB_VIDEO BLOB;
        
        V_NOMBRE PRODUCTO.NOMBRE%TYPE := P_NOMBRE;
        V_PORTADA VARCHAR2(30) := P_PORTADA;
        V_VIDEO VARCHAR2(30) := P_VIDEO;
        V_DESCRIPCION PRODUCTO.DESCRIPCION%TYPE := P_DESCRIPCION;
        V_FECHAESTRENO PRODUCTO.FECHAESTRENO%TYPE := P_FECHAESTRENO;
        V_DURACION PRODUCTO.DURACION%TYPE := P_DURACION;
        V_GENERO PRODUCTO.GENERO%TYPE := P_GENERO;
        V_TIPO PRODUCTO.TIPO_PRODUCTO%TYPE := P_TIPO_PRODUCTO;
        
        V_ACCESO NUMBER(1);
        
        E_REGISTRO_SU EXCEPTION;
    BEGIN
    
        SAVEPOINT inicio_transaccion;
    
        SELECT TIPOACCESO INTO V_ACCESO FROM ADMINISTRADOR A WHERE A.CODIGO = V_CODIGO_ADMIN;
        
        IF(V_CODIGO_ADMIN != 0 AND V_ACCESO = 1) THEN
            INSERT INTO PRODUCTO(CODIGO_ADMIN, PORTADA, NOMBRE, DESCRIPCION, FECHAESTRENO, DURACION, GENERO, TIPO_PRODUCTO)
            VALUES(V_CODIGO_ADMIN, EMPTY_BLOB(), V_NOMBRE, V_DESCRIPCION, V_FECHAESTRENO,
            V_DURACION, V_GENERO, V_TIPO) RETURN PORTADA, VIDEO INTO V_BLOB_IMAGEN, V_BLOB_VIDEO;
            
            --información de la imagen
            
            V_BFILE_IMAGEN := BFILENAME('DIR_PORTADAS_PRODUCTOS', V_PORTADA);        
            DBMS_LOB.OPEN(V_BFILE_IMAGEN, DBMS_LOB.LOB_READONLY);        
            DBMS_LOB.LOADFROMFILE(V_BLOB_IMAGEN, V_BFILE_IMAGEN, DBMS_LOB.GETLENGTH(V_BFILE_IMAGEN));
            DBMS_LOB.CLOSE(V_BFILE_IMAGEN);
            
            --información del vídeo
            
            V_BFILE_VIDEO := BFILENAME('DIR_VIDEOS_PRODUCTOS', V_VIDEO);    
            DBMS_LOB.OPEN(V_BFILE_VIDEO, DBMS_LOB.LOB_READONLY);
            DBMS_LOB.LOADFROMFILE(V_BLOB_VIDEO, V_BFILE_VIDEO, DBMS_LOB.GETLENGTH(V_BFILE_VIDEO));
            DBMS_LOB.CLOSE(V_BFILE_VIDEO);
            
            COMMIT;
            
        ELSE
            RAISE E_REGISTRO_SU;   
        END IF;
        
    EXCEPTION
        WHEN E_REGISTRO_SU THEN
            DBMS_OUTPUT.PUT_LINE('SU USUARIO NO POSEE PERMISOS PARA REGISTRAR PRODUCTOS...'); 
            ROLLBACK TO SAVEPOINT inicio_transaccion;
        WHEN OTHERS THEN
            ROLLBACK TO SAVEPOINT inicio_transaccion;
    END; 

    PROCEDURE ACTUALIZAR_PRODUCTOS(P_COD_PELICULA IN NUMBER,  P_CODIGO_ADMIN IN NUMBER, P_PORTADA IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2, P_FECHAESTRENO IN DATE, P_DURACION IN VARCHAR2, P_GENERO IN VARCHAR2)
    AS
        V_CODIGO_PELICULA PRODUCTO.CODIGO%TYPE := P_COD_PELICULA;
        V_CODIGO_ADMIN PRODUCTO.CODIGO_ADMIN%TYPE := P_CODIGO_ADMIN;
        
        V_PORTADA VARCHAR2(30) := P_PORTADA;
        V_BFILE_IMAGEN BFILE;
        V_BLOB_IMAGEN BLOB; 
        
        V_DESCRIPCION PRODUCTO.DESCRIPCION%TYPE := P_DESCRIPCION;
        V_FECHAESTRENO PRODUCTO.FECHAESTRENO%TYPE := P_FECHAESTRENO;
        V_DURACION PRODUCTO.DURACION%TYPE := P_DURACION;
        V_GENERO PRODUCTO.GENERO%TYPE := P_GENERO;
        
        V_ACCESO NUMBER(1);
        
        E_REGISTRO_SU EXCEPTION;
        
    BEGIN
        SELECT TIPOACCESO INTO V_ACCESO FROM ADMINISTRADOR A WHERE A.CODIGO = V_CODIGO_ADMIN;
        
        IF(V_CODIGO_ADMIN != 0 AND V_ACCESO = 1) THEN
        
            UPDATE PRODUCTO SET CODIGO_ADMIN = V_CODIGO_ADMIN, PORTADA = EMPTY_BLOB(), DESCRIPCION = V_DESCRIPCION, FECHAESTRENO = V_FECHAESTRENO,
            DURACION = V_DURACION, GENERO = V_GENERO
            WHERE CODIGO = V_CODIGO_PELICULA
            RETURN PORTADA INTO V_BLOB_IMAGEN;
            
            V_BFILE_IMAGEN := BFILENAME('DIR_PORTADAS_PRODUCTOS', V_PORTADA);        
            DBMS_LOB.OPEN(V_BFILE_IMAGEN, DBMS_LOB.LOB_READONLY);        
            DBMS_LOB.LOADFROMFILE(V_BLOB_IMAGEN, V_BFILE_IMAGEN, DBMS_LOB.GETLENGTH(V_BFILE_IMAGEN));
            DBMS_LOB.CLOSE(V_BFILE_IMAGEN);
            COMMIT;
            
        ELSE
            RAISE E_REGISTRO_SU;   
        END IF;
        
    EXCEPTION
        WHEN E_REGISTRO_SU THEN
            DBMS_OUTPUT.PUT_LINE('SU USUARIO NO POSEE PERMISOS PARA ACTUALIZAR PRODUCTOS...'); 
    END;
 
    PROCEDURE DESHABILITAR_PRODUCTO(P_CODIGO IN NUMBER)
    AS
        V_CODIGO PRODUCTO.CODIGO%TYPE := P_CODIGO;
        V_ESTADO PRODUCTO.ESTADO_PRODUCTO%TYPE;
        E_DESHABILITADA EXCEPTION;
    BEGIN
    
        SELECT P.ESTADO_PRODUCTO
        INTO V_ESTADO
        FROM PRODUCTO P
        WHERE P.CODIGO = V_CODIGO;
    
        CASE
            WHEN (V_ESTADO = 1) THEN
                UPDATE PRODUCTO P
                SET P.ESTADO_PRODUCTO = '2'
                WHERE P.CODIGO = V_CODIGO;
                DBMS_OUTPUT.PUT_LINE('EL PRODUCTO HA SIDO DESHABILITADO.');
            WHEN (V_ESTADO = 2) THEN
                RAISE E_DESHABILITADA;
        END CASE;
    EXCEPTION
    
        WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO DESHABILITAR. ' || 
        'VERIFIQUE QUE EL CÓDIGO SEA CORRECTO.');
    
        WHEN E_DESHABILITADA THEN DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO DESHABILITAR. ' || 
        'EL PRODUCTO YA HA SIDO DESHABILITADO.');
    END;
 
    --IMPLEMENTACIÓN DE LA PROYECCIÓN DE LOS REGISTROS
    
    PROCEDURE PROYECTAR_PRODUCTOS(REG_PRODUCTOS OUT SYS_REFCURSOR)
    AS
    BEGIN
        OPEN REG_PRODUCTOS FOR SELECT CODIGO, NOMBRE FROM PRODUCTO;
    END;
    
    --IMPLEMENTACIÓN DEL RETORNAR DE LA TABLA
    
    PROCEDURE DATOS_PRODUCTOS (P_TITULO IN VARCHAR2 ,REG_ACTORES OUT SYS_REFCURSOR)
    AS 
      BEGIN
        OPEN REG_ACTORES FOR SELECT A.PRIMERNOMBRE || ' '  || A.PRIMERAPELLIDO AS NOMBRECOMPLETO
        FROM ACTOR A JOIN ACTOR_PRODUCTO A_P ON (A.CODIGO = A_P.CODIGO_ACTOR)
        WHERE A_P.CODIGO_PRODUCTO = (  SELECT CODIGO
                                     FROM PRODUCTO
                                     WHERE NOMBRE = P_TITULO);
    END DATOS_PRODUCTOS;
    
    PROCEDURE DATOS_PRODUCTOS2(P_TITULO IN VARCHAR2 ,REG_DETALLES OUT SYS_REFCURSOR)
    AS 
    BEGIN
        OPEN REG_DETALLES FOR SELECT P.TIPO_PRODUCTO,P.GENERO , P.DESCRIPCION , VISITAS
        FROM PRODUCTO P JOIN (SELECT  CODIGO_PRODUCTO,COUNT(CODIGO_REPRODUCCION) as VISITAS
        FROM CLIENTE_PRODUCTO
        GROUP BY  CODIGO_PRODUCTO) C ON (P.CODIGO = C.CODIGO_PRODUCTO)
        WHERE P.CODIGO = (  SELECT CODIGO
                         FROM PRODUCTO
                         WHERE NOMBRE = P_TITULO);
    END DATOS_PRODUCTOS2;
    
END PAQUETE_PRODUCTO;


----------------------------------------------------------------------------------
/*
    PAQUETE PARA LA LÓGICA DE PLATAFORMA
*/
----------------------------------------------------------------------------------

--CREACIÓN DE SECUENCIA Y TRIGGER PARA AUTOMATIZAR EL CÓDIGO

CREATE SEQUENCE REPRODUCCION_CODIGO_SECUENCIA START WITH 000001;

CREATE OR REPLACE TRIGGER REPRODUCCION_CODIGO_TRIGGER
    BEFORE INSERT ON CLIENTE_PRODUCTO
        FOR EACH ROW
    BEGIN
        SELECT REPRODUCCION_CODIGO_SECUENCIA.NEXTVAL
        INTO :NEW.CODIGO_REPRODUCCION
        FROM DUAL;
END;

--DECLARACIÓN DEL PAQUETE

CREATE OR REPLACE PACKAGE PAQUETE_PLATAFORMA IS
    --CRUDS
    
    PROCEDURE REGISTRAR_ACTUACION(P_PRODUCTO IN NUMBER, P_ACTOR IN NUMBER, P_PAPEL IN VARCHAR2);
    
    PROCEDURE REGISTRAR_REPRODUCCION(P_COD_CLIENTE IN NUMBER, P_COD_PRODUCTO IN NUMBER);
    
    --PROYECCIÓN DE LOS REGISTROS
    
    PROCEDURE DATOS_USUARIO(P_USUARIO_CLIENTE IN VARCHAR2, REG_USUARIO OUT SYS_REFCURSOR);
    
    PROCEDURE DATOS_USUARIO_PROV(P_USUARIO_CLIENTE IN VARCHAR2, REG_USUARIO OUT SYS_REFCURSOR);
    
    --LÓGICA DEL LOGIN
    
    PROCEDURE LOGIN_USUARIO (V_EXISTE IN NUMBER , P_USUARIO IN VARCHAR2,P_CONTRASENIA IN VARCHAR2 ,V_ACCESO OUT NUMBER);
    
END PAQUETE_PLATAFORMA;

--IMPLEMENTACIÓN DEL PAQUETE

CREATE OR REPLACE PACKAGE BODY PAQUETE_PLATAFORMA IS
    --IMPLEMENTACIÓN DE LAS CRUDS
    
    PROCEDURE REGISTRAR_ACTUACION(P_PRODUCTO IN NUMBER, P_ACTOR IN NUMBER, P_PAPEL IN VARCHAR2)
    AS
         V_PRODUCTO_COD ACTOR_PRODUCTO.CODIGO_PRODUCTO%TYPE := P_PRODUCTO;
         V_ACTOR_COD ACTOR_PRODUCTO.CODIGO_ACTOR%TYPE := P_ACTOR;
         V_PAPEL ACTOR_PRODUCTO.PAPEL%TYPE := P_PAPEL; 
    BEGIN    
        INSERT INTO ACTOR_PRODUCTO VALUES(V_ACTOR_COD, V_PRODUCTO_COD, V_PAPEL);
    END;
    
    PROCEDURE REGISTRAR_REPRODUCCION(P_COD_CLIENTE IN NUMBER, P_COD_PRODUCTO IN NUMBER)
    AS
        TYPE RECORD_RESPRODUCCION IS RECORD
        (
            V_COD_CLIENTE CLIENTE_PRODUCTO.CODIGO_CLIENTE%TYPE := P_COD_CLIENTE,
            V_COD_PRODUCTO CLIENTE_PRODUCTO.CODIGO_PRODUCTO%TYPE := P_COD_PRODUCTO
        );
        RESPRODUCCION_NUEVA RECORD_RESPRODUCCION;
    BEGIN
        INSERT INTO CLIENTE_PRODUCTO(CODIGO_CLIENTE, CODIGO_PRODUCTO) VALUES(RESPRODUCCION_NUEVA.V_COD_CLIENTE,
        RESPRODUCCION_NUEVA.V_COD_PRODUCTO);
    END;
    
    --IMPLEMENTACIÓN DE LA PROYECCIÓN DE LOS REGISTROS
    
    PROCEDURE DATOS_USUARIO(P_USUARIO_CLIENTE IN VARCHAR2, REG_USUARIO OUT SYS_REFCURSOR)
    AS 
    BEGIN
    OPEN REG_USUARIO FOR 
        SELECT C.CODIGO, C.PRIMERNOMBRE, C.SEGUNDONOMBRE, C.PRIMERAPELLIDO, C.SEGUNDOAPELLIDO, C.CORREO, P.NOMBRE,
        P.PRECIO, T.NUMEROTARJETA, T.TIPOTARJETA
        FROM CLIENTE C INNER JOIN CLIENTE_PLAN CP ON CP.CODIGO_CLIENTE = C.CODIGO INNER JOIN PLANSUSCRIPCION P
        ON P.CODIGO = CP.CODIGO_PLAN INNER JOIN TARJETA T ON T.CLIENTE = C.CODIGO
        WHERE C.NOMBRE_USUARIO_CLIENTE = 'loop';
    END DATOS_USUARIO;
    
    PROCEDURE DATOS_USUARIO_PROV(P_USUARIO_CLIENTE IN VARCHAR2, REG_USUARIO OUT SYS_REFCURSOR)
    AS 
    BEGIN
        OPEN REG_USUARIO FOR 
        SELECT C.CODIGO, C.PRIMERNOMBRE, C.SEGUNDONOMBRE
        FROM CLIENTE C
        WHERE C.NOMBRE_USUARIO_CLIENTE = 'fdfdfd';
    END DATOS_USUARIO_PROV;
    
    --IMPLEMENTACIÓN DE LA LÓGICA DEL LOGIN
      
    PROCEDURE LOGIN_USUARIO (V_EXISTE IN NUMBER , P_USUARIO IN VARCHAR2,P_CONTRASENIA IN VARCHAR2, V_ACCESO OUT NUMBER)
    IS  
        BEGIN  
            IF V_EXISTE = 1 THEN
                SELECT TIPOACCESO
                INTO V_ACCESO
                FROM    ADMINISTRADOR 
                WHERE NOMBRE_USUARIO_ADMIN = P_USUARIO AND CONTRASENIA = P_CONTRASENIA ;
            ELSIF V_EXISTE = 2 THEN  
                SELECT TIPOACCESO  
                INTO V_ACCESO
                FROM    CLIENTE
                WHERE NOMBRE_USUARIO_CLIENTE = P_USUARIO AND CONTRASENIA = P_CONTRASENIA;
            END IF;
            
            EXCEPTION
                WHEN NO_DATA_FOUND  THEN V_ACCESO:= -1;
    END  LOGIN_USUARIO;
    
END PAQUETE_PLATAFORMA;
